name: Deploy service

on:
  push:
    branches:
      - main  # Cambia esto al nombre de la rama desde la que deseas desplegar

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Analiza el código que se usará
      - name: Checkout code
        uses: actions/checkout@v3

      # Establece que estaremos interactuando con Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Establece las credenciales de AWS para usar sus recursos
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Autenticarse dentro de Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Genera la imagen y la sube a ECR con el id del commit como tag para identificarlo
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # Despliegue de la imagen docker creada anteriormente
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Esto asegura que el trabajo de 'deploy' solo se ejecute si 'build' termina con éxito

    steps:
      # Autenticación dentro de AWS para acceder a sus recursos
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Autenticarse dentro de Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Despliegue de la imágen creada en el servidor EC2 (previamente se configura el docker-compose en el servidor)
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Navega al directorio donde está el docker-compose.yaml
            cd /home/${{ secrets.EC2_USER }}/${{ secrets.FOLDER }}
            
            # Autenticarse en ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            
            # Haz pull de la imagen desde ECR
            sudo docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}

            # Reemplazar la imagen en docker-compose.yaml
            sudo sed -i "s|image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:.*|image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}|" /home/${{ secrets.EC2_USER }}/${{ secrets.FOLDER }}/docker-compose.yaml
            
            # Eliminar contenedores antiguos
            yes | sudo docker system prune -a -f
            
            # Ejecuta docker-compose con la nueva imagen
            sudo docker compose down
            sudo docker compose up -d
            
            # Eliminar imágenes no utilizadas para liberar espacio
            sudo docker image prune -a -f
